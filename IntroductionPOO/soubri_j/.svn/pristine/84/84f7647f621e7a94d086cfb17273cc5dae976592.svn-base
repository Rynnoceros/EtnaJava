package com.cours.utils;

import java.lang.reflect.Constructor;
import java.lang.reflect.Field;
import java.text.SimpleDateFormat;
import java.util.Date;


public class CreateObjectUtil<T> {
	
	private Class<T> theClass; 
	
	/**
	 * Default constructor
	 * @param theClass Object class to fill
	 */
	public CreateObjectUtil(Class<T> theClass) {
		this.theClass = theClass;
	}
	
	/**
	 * Method to generate an instance of object from a String tab
	 * @param headers Headers' list
	 * @param fields Fields' list
	 * @return An instance of the object if ok, null otherwise
	 */
    public T getInstanceFromLine(String headers[], String fields[]) {
    	T instance = null;
    	
    	if (fields != null && headers != null && theClass != null) {
    		try {
    			Constructor<T> constructor = theClass.getDeclaredConstructor();
    			if (constructor != null) {    				
    				instance = constructor.newInstance();
    				if (instance != null) {    					
    					for (int i = 0; i < headers.length; ++i) {
    						fillField(instance, headers[i], fields[i]);
    					}
    				}
    			}
			} catch (Exception e) {
				e.printStackTrace();
			} 
    	}
    	
    	return instance;
    }
    
    /**
     * Method used to fill a field
     * @param instance Instance of the object to fill 
     * @param fieldName The field name to fill
     * @param value The value to put in the field
     */
    private void fillField(T instance, String fieldName, String value) {
    	Field field = null;
    	Class<?> fieldClass = null;
    	
		try {
			if (value != null)
			{
				field = theClass.getDeclaredField(fieldName);
				if (field != null) {
					field.setAccessible(true);
					fieldClass = field.getType();					
					if (fieldClass == Boolean.class) {
						field.set(instance, Boolean.parseBoolean(value));
					} else if (fieldClass == Byte.class) {
						field.set(instance, Byte.parseByte(value));
					} else if (fieldClass == Character.class) {
						if (value.length() > 0) {						
							field.set(instance, value.charAt(0));
						}
					} else if (fieldClass == Short.class) {
						field.set(instance, Short.parseShort(value));
					} else if (fieldClass == Integer.class) {
						field.set(instance, Integer.parseInt(value));
					} else if (fieldClass == Long.class) {
						field.set(instance, Long.parseLong(value));
					} else if (fieldClass == Float.class) {
						field.set(instance, Float.parseFloat(value));
					} else if (fieldClass == Double.class) {
						field.set(instance, Double.parseDouble(value));
					} else if (fieldClass == Date.class) {
						SimpleDateFormat formatter = new SimpleDateFormat(Constants.DATE_PATTERN);
						field.set(instance, formatter.parse(value));
					} else {
						field.set(instance, value);
					}
				}
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
    }
}

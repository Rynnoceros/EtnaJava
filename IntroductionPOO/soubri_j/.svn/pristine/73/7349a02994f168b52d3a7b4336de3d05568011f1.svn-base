/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.cours.dao.impl.csv;

import com.cours.dao.IDao;
import com.cours.observer.MySubjectObserver;
import com.cours.utils.Constants;
import com.cours.utils.CreateObjectUtil;
import com.cours.utils.StringUtil;

import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.lang.reflect.Field;
import java.util.ArrayList;
import java.util.List;
import java.util.function.Predicate;

/**
 *
 * @author ElHadji
 * @param <T>
 */
public abstract class AbstractCsvDao<T> implements IDao<T> {
	private String headers[] = null;
    private String csvPathFile = null;
    private Class<T> myClass = null;
    private MySubjectObserver mySubject = null;
    private CreateObjectUtil<T> objectGenerator = null;

    public AbstractCsvDao(Class<T> myClass, MySubjectObserver mySubject, String csvPathFile) {
    	this.myClass = myClass;
        this.mySubject = mySubject;
        this.csvPathFile = csvPathFile;
        this.objectGenerator = new CreateObjectUtil<T>(myClass);
    }

    public AbstractCsvDao(Class<T> myClass, String csvPathFile) {
    	this.myClass = myClass;
        this.csvPathFile = csvPathFile;
        this.objectGenerator = new CreateObjectUtil<T>(myClass);
    }

    @Override
    public List<T> findAll() {
    	List<T> toReturn = null;
    	FileReader fr = null;
    	BufferedReader br = null;
    	String line[] = null;
    			
    	if (this.csvPathFile != null)
    	{
    		try {
				fr = new FileReader(this.csvPathFile);
				if (fr != null) {
					br = new BufferedReader(fr);
					if (br != null) {						
						headers = StringUtil.getFields(br.readLine(), Constants.CSV_SEPARATOR);
						if (headers != null) {
							toReturn = new ArrayList<T>();
							do {
								line = StringUtil.getFields(br.readLine(), Constants.CSV_SEPARATOR);
								if (line != null) {
									T instance = objectGenerator.getInstanceFromLine(headers, line);
									if (instance != null) {
										toReturn.add(instance);
									}
								}
							} while (line != null);
						}
					}
				}
			} catch (FileNotFoundException e) {
				e.printStackTrace();
			} catch (IOException e) {
				e.printStackTrace();
			} finally {
				try {
					if (fr != null) {
						fr.close();
					}
					if (br != null) {
						br.close();
					}
				} catch (IOException e) {
					e.printStackTrace();
				}
			}  		
    	}
    	
        return toReturn;
    }

    /**
     * Method used to find an element by its id.
     */
    @Override
    public T findById(int id) {
    	List<T> allInstances = findAll();
    	T toReturn = null;
    	
    	if (allInstances != null) {
    		allInstances.stream()
    					.filter(filterId(id))
    					.findFirst();
    	}
    	
        return toReturn;
    }
    
    /**
     * Predicate used to filter by id
     * @param idToSearch Searched id
     * @return return true if id is equal to idToSearch, false otherwise
     */
	private Predicate<T> filterId(int idToSearch) {
    	return p -> {
    		Field field = null;
    		boolean toReturn = false;
    		int id = 0;
    		
    		try {
        		field = myClass.getDeclaredField("id");
    		
    			if (field != null) {
    				id = (int)field.get(p);
    				toReturn = (id == idToSearch);
    			}
    		} catch (Exception ex) {
    			ex.printStackTrace();
    		} finally {
    			return toReturn;
    		}
    	};
    }

    @Override
    public List<T> findByCriteria(String criteria, Object valueCriteria) {
        return null;
    }

    @Override
    public T create(T t) {
        return null;
    }

    @Override
    public boolean delete(T t) {
        return false;
    }
}

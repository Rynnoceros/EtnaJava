/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.etna.mypenelope.core.dao.impl;

import com.etna.mypenelope.core.Connexion;
import com.etna.mypenelope.core.Constants;
import com.etna.mypenelope.core.LogManager;
import com.etna.mypenelope.core.dao.IDao;
import java.lang.reflect.Field;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

/**
 * Abstract class dao to communicate with SQL db 
 * @author soubri_j/martin_m
 */
public abstract class AbstractSQLDao<T> implements IDao<T> {
    protected Connexion connexion = new Connexion();
    private GenericSQLObjectUtil<T> myUtil = null;
    private String tableName = "";

    public AbstractSQLDao(Class<T> t, String tableName) {
        this.tableName = tableName;
        this.myUtil = new GenericSQLObjectUtil<T>(t);
    }

    /**
     * Return the list of all T
     */
    @Override
    public List<T> findAll() {
        List<T> toReturn = new ArrayList<T>();
        ResultSet results = null;
        if (this.connexion != null) {
            try {
                String requete = String.format(Constants.SELECT_ALL, this.tableName);
                PreparedStatement statement = connexion.ObtenirConnexion().prepareStatement(requete);
                statement.execute();
                results = statement.getResultSet();
                if (results != null) {
                    toReturn = convertToList(results);
                }
            } catch (SQLException ex) {
                LogManager.getInstance().log(ex.getLocalizedMessage());
            }    
        }        
        return toReturn;            
    }

    /**
     * Returns the instance of T with the id.
     */
    @Override
    public T findById(int id) {
    	T instance = null;
    	List<T> all = null;
        
    	if (this.connexion != null && this.myUtil != null) {
            try {
                String requete = String.format(Constants.SELECT_WHERE_PARAMETER, this.tableName, Constants.ID + this.myUtil.getClassName(), id);
                PreparedStatement ps = connexion.ObtenirConnexion().prepareStatement(requete);
                this.myUtil.fillPreparedStatement(ps, Constants.ID + this.myUtil.getClassName(), id, 1);
                ps.execute();
                all = convertToList(ps.getResultSet());
                if (all != null && all.size() > 0) {
                    instance = all.get(0);
                }
            } catch (SQLException ex) {
                LogManager.getInstance().log(ex.getLocalizedMessage());
            }
    	}
    	return instance;
    }

    /**
     * Method used to find an object on a criteria
     * @param criteria : Criteria's name
     * @param valueCriteria : The value to find
     * @return List of T if found , null otherwise;
     */
    @Override
    public List<T> findByCriteria(String criteria, Object valueCriteria) {
    	List<T> all = null;
        
    	if (this.connexion != null && this.myUtil != null) {
            try {
                String requete = String.format(Constants.SELECT_WHERE_PARAMETER, this.tableName, criteria, valueCriteria.toString());
                PreparedStatement ps = connexion.ObtenirConnexion().prepareStatement(requete);
                this.myUtil.fillPreparedStatement(ps, criteria, valueCriteria, 1);
                ps.execute();
                all = convertToList(ps.getResultSet());
            } catch (SQLException ex) {
                LogManager.getInstance().log(ex.getLocalizedMessage());
            }
    	}
    	return all;
    }

    /**
     * Add a T element in the list. 
     * @return The element if ok, null otherwise;
     */
    @Override
    public T create(T t) {
    	T toCreate = null;
    	int newId = Constants.EXCEPTION_CODE_ELEMENT_ALREADY_EXIST;
    	
        if (t != null) {
            newId = maxId();
            newId++;
            if (this.myUtil != null) {        			
                try {
                    String requete = constructInsertQuery();
                    PreparedStatement ps = connexion.ObtenirConnexion().prepareStatement(requete);
                    this.myUtil.fillPreparedStatement(ps, t);
                    ps.execute();
                } catch (Exception e) {
                    // TODO Auto-generated catch block
                    e.printStackTrace();
                }
            }
        }
        return toCreate;
    }
    
    /**
     * Method used to construct a prepared statement query with the fields of the object
     * @return The prepared statement query
     */
    private String constructInsertQuery() {
        StringBuilder sb = new StringBuilder(String.format(Constants.INSERT_INTO, this.tableName));
        Field[] fields = this.myUtil.getTheClass().getDeclaredFields();
        
        for(Field field : fields) {
            sb.append(field.getName());
            sb.append(",");
        }
        sb.deleteCharAt(sb.length() - 1);
        sb.append(") VALUES(");
        for (int i = 0; i < fields.length; ++i) {
            sb.append("?");
            if (i < fields.length - 1) {
                sb.append(",");
            } else {
                sb.append(");");
            }
        }      
        return sb.toString();
    }

    /**
     * Update an element of the list
     * @param t : The element to update
     * @return The updated element if ok, null otherwise
     */
    @Override
    public T update(T t) {
    	T toUpdate = null;
    	int idToFind = 0;
    	
    	if (t != null) {
            if (this.connexion != null && this.myUtil != null) {
                try {
                    Field field = this.myUtil.getTheClass().getDeclaredField(Constants.ID + this.myUtil.getClassName());
                    if (field != null) {
                        field.setAccessible(true);
                        idToFind = (Integer)field.get(t);
                        String requete = constructUpdateQuery();
                        PreparedStatement ps = connexion.ObtenirConnexion().prepareStatement(requete);
                        this.myUtil.fillPreparedStatement(ps, t);
                        this.myUtil.fillPreparedStatement(ps, field.getName(), idToFind, this.myUtil.getTheClass().getDeclaredFields().length);
                        ps.execute();
                    }         
                } catch (Exception e) {
                    // TODO Auto-generated catch block
                    LogManager.getInstance().log(e.getLocalizedMessage());
                }    			
            }
    	}
    	return toUpdate;
    }
    
    /**
     * Method used to construct a prepared statement query with the fields of the object
     * @return The prepared statement query
     */
    private String constructUpdateQuery() {
        StringBuilder sb = new StringBuilder(String.format(Constants.UPDATE_QUERY, this.tableName));
        Field[] fields = this.myUtil.getTheClass().getDeclaredFields();
        
        for(Field field : fields) {
            sb.append(field.getName());
            sb.append(" = ?,");
        }
        sb.deleteCharAt(sb.length() - 1);
        sb.append(") WHERE ");
        sb.append(Constants.ID + this.myUtil.getClassName());
        sb.append(" = ?;");  
        return sb.toString();
    }

    /**
     * Delete an element from the list
     * @param t : The element to delete
     * @return true if the element was found and deleted, false otherwise
     */
    @Override
    public boolean delete(T t) {
    	boolean deleted = false;
    	int idToDelete = 0;
    	
    	if (t != null) {
            if (this.connexion != null && this.myUtil != null) {
                try {
                    Field fToFind = this.myUtil.getTheClass().getDeclaredField(Constants.ID + this.myUtil.getClassName());
                    if (fToFind != null) {
                        fToFind.setAccessible(true);
                        idToDelete = (Integer)fToFind.get(t);
                        String requete = constructDeleteQuery();
                        PreparedStatement ps = connexion.ObtenirConnexion().prepareStatement(requete);
                        this.myUtil.fillPreparedStatement(ps, Constants.ID + this.myUtil.getClassName(), idToDelete, 1);
                        ps.execute();
                    }
                } catch (Exception e) {
                    // TODO Auto-generated catch block
                    LogManager.getInstance().log(e.getLocalizedMessage());
                }
            }
    	}
        return deleted;
    }
    
    private String constructDeleteQuery() {
        StringBuilder sb = new StringBuilder(String.format(Constants.DELETE_QUERY, this.tableName));

        sb.append(Constants.ID + this.myUtil.getClassName());
        sb.append(" = ?;");
        
        return sb.toString();
    }
    
    /**
     * Method used to return the maximum id of a list
     * @return the maximum id if ok, -1 otherwise
     */
    private int maxId() {
    	int iReturn = 0;
    	
    	if (this.connexion != null && this.myUtil != null) {
            String requete = String.format(Constants.SELECT_MAX_ID, Constants.ID + this.myUtil.getClassName(), this.tableName);
            try {
                PreparedStatement ps = connexion.ObtenirConnexion().prepareStatement(requete);
                ps.execute();
                ResultSet result = ps.getResultSet();
                if (result.next())
                {
                    iReturn = result.getInt(1);
                }
            } catch (Exception e) {
                LogManager.getInstance().log(e.getLocalizedMessage());
            }
    	}  	
    	return iReturn;
    }
 
    private List<T> convertToList(ResultSet set) {
        List<T> toReturn = new ArrayList<T>();
        
        if (set != null) {
            try {
                while (set.next()) {
                    T instance = createInstance(set);
                    if (instance != null) {
                        toReturn.add(instance);
                    }
                }
            } catch (SQLException ex) {
                LogManager.getInstance().log(ex.getLocalizedMessage());
            }
        }
        return toReturn;
    }
    
    private T createInstance(ResultSet set) {
        T instance = null;
        Class<T> theClass = null;
        
        if(set != null) {
            try {
                theClass = this.myUtil.getTheClass();
                instance = theClass.newInstance();
                for(Field field : theClass.getDeclaredFields()) {
                    this.myUtil.fillField(instance, field.getName(), set);
                }
            } catch(Exception ex) {
                LogManager.getInstance().log(ex.getLocalizedMessage());
            }
        }
        return instance;
    }
}

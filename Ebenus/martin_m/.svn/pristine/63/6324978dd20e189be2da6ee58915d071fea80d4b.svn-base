/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.cours.ebenus.dao.impl;

import com.cours.ebenus.dao.ConnectionHelper;
import com.cours.ebenus.dao.DriverManagerSingleton;
import com.cours.ebenus.dao.IUtilisateurDao;
import com.cours.ebenus.dao.entities.Role;
import com.cours.ebenus.dao.entities.Utilisateur;
import com.cours.ebenus.dao.exception.EbenusException;
import com.cours.ebenus.utils.Constants;

import java.lang.reflect.Field;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

/**
 *
 * @author ElHadji
 */
public class UtilisateurDao extends AbstractDao<Utilisateur> implements IUtilisateurDao {

    private static final Log log = LogFactory.getLog(UtilisateurDao.class);
    
    public UtilisateurDao() {
        super(Utilisateur.class, Constants.TABLE_UTILISATEUR);
    }
    
    @Override
    public List<Utilisateur> findAllUtilisateurs() {
    	return findUtilisateurByCriteria(Constants.SELECT_ALL_UTILISATEUR_ROLE, new String[] { }, new Object[] { });
    }

    @Override
    public Utilisateur findUtilisateurById(int idUtilisateur) {
    	Utilisateur toFind = null;
    	List<Utilisateur> all = findUtilisateurByCriteria(Constants.SELECT_FIND_UTILISATEUR_BY_CRITERIA, new String[] { "idUtilisateur" }, new Object[] { idUtilisateur });
    	if (all != null && all.size() > 0) {
    		toFind = all.get(0);
    	}
    	return toFind;
    }

    @Override
    public List<Utilisateur> findUtilisateursByPrenom(String prenom) {
    	return findUtilisateurByCriteria(Constants.SELECT_FIND_UTILISATEUR_BY_CRITERIA, new String[] { "prenom" }, new Object[] { prenom });
    }

    @Override
    public List<Utilisateur> findUtilisateursByNom(String nom) {
    	return findUtilisateurByCriteria(Constants.SELECT_FIND_UTILISATEUR_BY_CRITERIA, new String[] { "nom" }, new Object[] { nom });
    }

    @Override
    public List<Utilisateur> findUtilisateurByIdentifiant(String identifiant) {
    	return findUtilisateurByCriteria(Constants.SELECT_FIND_UTILISATEUR_BY_CRITERIA, new String[] { "u.identifiant" }, new Object[] { identifiant });
    }

    @Override
    public List<Utilisateur> findUtilisateursByIdRole(int idRole) {
    	return findUtilisateurByCriteria(Constants.SELECT_FIND_UTILISATEUR_BY_CRITERIA, new String[] { "idRole" }, new Object[] { idRole });
    }

    @Override
    public List<Utilisateur> findUtilisateursByIdentifiantRole(String identifiantRole) {
    	return findUtilisateurByCriteria(Constants.SELECT_FIND_UTILISATEUR_BY_CRITERIA, new String[] { "r.identifiant" }, new Object[] { identifiantRole });
    }
    
    public List<Utilisateur> findUtilisateurByCriteria(String request, String[] criterias, Object[] values) {
    	List<Utilisateur> all = null;
    	PreparedStatement ps = null;
    	ResultSet result = null;
        
    	if (this.myUtil != null && values != null) {
            try {
            	String requestFormatted = String.format(request, (Object[])criterias);
            	ps = DriverManagerSingleton.getConnectionInstance().prepareStatement(requestFormatted);
                for (int i = 0; i < values.length; ++i) {
                	ps.setObject(i + 1, values[i]);
                }
                ps.execute();
                result = ps.getResultSet();
                all = convertToListUtilisateur(result);
            } catch (SQLException ex) {
                ex.printStackTrace();
            } finally {
            	ConnectionHelper.closeSqlResources(ps, result);
            }
    	}
    	return all;
    }
    
    private List<Utilisateur> convertToListUtilisateur(ResultSet set) {
    	List<Utilisateur> toReturn = new ArrayList<Utilisateur>();
        
        if (set != null) {
            try {
                while (set.next()) {
                    Utilisateur utilisateur = createUtilisateur(set);
                    if (utilisateur != null) {
                        toReturn.add(utilisateur);
                    }
                }
            } catch (SQLException ex) {
                ex.printStackTrace();
            }
        }
        return toReturn;
    }
    
    private Utilisateur createUtilisateur(ResultSet set) {
    	Utilisateur instance = null;
        
        if(set != null) {
        	try {
	        	instance = new Utilisateur();
	        	instance.setActif(set.getBoolean("actif"));
	        	instance.setCivilite(set.getString("civilite"));
	        	instance.setDateCreation(set.getDate("dateCreation"));
	        	instance.setDateModification(set.getDate("dateModification"));
	        	instance.setDateNaissance(set.getDate("dateNaissance"));
	        	instance.setIdentifiant(set.getString("identifiant"));
	        	instance.setIdUtilisateur(set.getInt("idUtilisateur"));
	        	instance.setMarquerEffacer(set.getBoolean("marquerEffacer"));
	        	instance.setMotPasse(set.getString("motPasse"));
	        	instance.setNom(set.getString("nom"));
	        	instance.setPrenom(set.getString("prenom"));
	        	instance.setVersion(set.getInt("version"));
	        	Role role = new Role();
	        	role.setIdRole(set.getInt("idRole"));
	        	role.setIdentifiant(set.getString("identifiantRole"));
	        	role.setVersion(set.getInt("versionRole"));
	        	role.setDescription(set.getString("description"));
	        	instance.setRole(role);
            } catch(Exception ex) {
                ex.printStackTrace();
            }
        }
        return instance;
    }

    @Override
    public Utilisateur createUtilisateur(Utilisateur user) {
    	Utilisateur toCreate = null;
    	if (user != null) {
    		List<Utilisateur> toFind = findUtilisateurByIdentifiant(user.getIdentifiant());
    		if (toFind == null || toFind.size() <= 0) {
    			user.setVersion(1);
    			user.setDateCreation(new Date());
        		user.setDateModification(new Date());
        		toCreate = super.create(user);
    		} else {
    			throw new EbenusException(String.format(Constants.ERROR_MSG_USER_EXISTING, user.getIdentifiant()), Constants.EXCEPTION_CODE_ELEMENT_ALREADY_EXIST);
    		}
    	}
        return toCreate;
    }

    @Override
    public Utilisateur updateUtilisateur(Utilisateur user) {
    	if (user != null) {
    		user.setDateModification(new Date());
    		return super.update(user);
    	}
        return null;
    }

    @Override
    public boolean deleteUtilisateur(Utilisateur user) {
        return super.delete(user);
    }

    /**
     * Méthode qui vérifie les logs email / password d'un utilisateur dans la
     * base de données
     *
     * @param email L'email de l'utilisateur
     * @param password Le password de l'utilisateur
     * @return L'utilisateur qui tente de se logger si trouvé, null sinon
     */
    @Override
    public Utilisateur authenticate(String email, String password) {
    	List<Utilisateur> toFind = findUtilisateurByIdentifiant(email);
    	if (toFind != null && toFind.size() > 0) {
    		if (toFind.get(0).getMotPasse().equals(password)) {
    			return toFind.get(0);
    		}
		}
        return null;
    }
    
    /**
     * Method used to update a user without changing its password
     */
    public Utilisateur updateUserWithoutPassword(Utilisateur user) {
    	if (user != null) {
    		user.setDateModification(new Date());
    		Utilisateur existing = super.findById(user.getIdUtilisateur());
    		if (existing != null) {
    			user.setMotPasse(existing.getMotPasse());
    		}
    		return super.update(user);
    	}
    	return user;
    }
}

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.cours.ebenus.servlets;

import com.cours.ebenus.dao.entities.Adresse;
import com.cours.ebenus.dao.entities.Utilisateur;
import com.cours.ebenus.service.IServiceFacade;
import com.cours.ebenus.service.impl.ServiceFacade;
import com.cours.ebenus.utils.UserConnectedManager;
import java.io.IOException;
import java.io.PrintWriter;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.util.List;
import java.util.ArrayList;

/**
 *
 * @author soubri_j/martin_m
 */
public class ClientAdresseServlet extends HttpServlet {

    private IServiceFacade serviceFacade = null;
    private String idUtilisateur = null;
    private String adresseFacturation = null;
    private Adresse adresseLivraisonPrincipale = null;
    private String dateToDisplay = "";
    List<Adresse> allAdresses = new ArrayList<Adresse>();
    List<Adresse> allAdressesLivraison = new ArrayList<Adresse>();
    
    /**
     * MÃ©thode d'initialisation de la Servlet
     *
     * @throws ServletException
     */
    @Override
    public void init() throws ServletException {
        serviceFacade = new ServiceFacade() ;
    }
    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        if (UserConnectedManager.getInstance().isUserConnected()) {
            Utilisateur toUpdate = null;
            Adresse adressToUpdate = null;
            
            if (request.getAttribute("error") != null) {
                toUpdate = (Utilisateur)request.getAttribute("updatedUser");
            } else {
                idUtilisateur = request.getParameter("id");
//                adresseFacturation = request.getParameter("idUtilisateur");
                if (idUtilisateur != null) {
                    toUpdate = serviceFacade.getUtilisateurDao().findUtilisateurById(Integer.parseInt(idUtilisateur));
                }
                if (toUpdate == null && adressToUpdate == null) {
                    toUpdate = new Utilisateur();
                    adressToUpdate = new Adresse();
                }
                
                allAdresses = serviceFacade.getAdresseDao().findAllAdresses();
                int idx = 0;
                for (Adresse adr : allAdresses) {
                    
                    if (adr.getTypeAdresse().equals("L"))
                        if (!allAdressesLivraison.contains(adr))
                            allAdressesLivraison.add(adr);
                    idx++;
                }
                
            }
            request.setAttribute("loggedUser", UserConnectedManager.getInstance().getLoggedUser());
            request.setAttribute("utilisateurToUpdate", toUpdate);
            
            request.setAttribute("allAdresses", allAdresses);
            request.setAttribute("allAdressesLivraison", allAdressesLivraison);
            request.getRequestDispatcher("/pages/infos/clientAdresse.jsp").forward(request, response);
        } else {
            request.getRequestDispatcher("/pages/login/login.jsp").forward(request, response);
        }
    }
}
